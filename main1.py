import os
import tempfile
import uuid
from gtts import gTTS
import pygame
import datetime
import sys
import webbrowser
import speech_recognition as sr

# ==========================
# CONFIG (Languages + Tabs)
# ==========================
LANGUAGES = {
    "en": {
        "name": "English",
        "texts": {
            "welcome": "Welcome to Oxland.",
            "select_lang": "Please select your language: English, Hindi, or Bengali.",
            "ask_name": "What is your name?",
            "morning": "Good morning {name}, welcome to Oxland.",
            "afternoon": "Good afternoon {name}, welcome to Oxland.",
            "evening": "Good evening {name}, welcome to Oxland.",
            "again": "Do you want to open another page?",
            "quit": "Goodbye {name}, have a great day!",
            "company": "Our company name is Oxbow Intellect Private Limited.",
            "assistant": "I am Oxland, your assistant."
        },
        "tabs": {
            "dashboard": "http://209.209.40.144:3031/",
            "locations": "http://209.209.40.144:3031/locations",
            "projects": "http://209.209.40.144:3031/projects",
            "analytics": "http://209.209.40.144:3031/analytics",
            "land acquisition": "http://209.209.40.144:3031/land-acquisition",
            "plot management": "http://209.209.40.144:3031/plot-management",
            "document search": "http://209.209.40.144:3031/document-search",
            "r & r": "http://209.209.40.144:3031/r-r",
            "litigation & court cases": "http://209.209.40.144:3031/litigation-court-cases",
            "land aggregator": "http://209.209.40.144:3031/land-aggregator",
            "agriculture": "http://209.209.40.144:3031/agriculture",
            "land use & land cover": "http://209.209.40.144:3031/land-use-cover",
            "forest land": "http://209.209.40.144:3031/forest-land",
            "faqs": "http://209.209.40.144:3031/faq",
            "master data": "http://209.209.40.144:3031/master-data",
            "imports": "http://209.209.40.144:3031/imports",
            "settings": "http://209.209.40.144:3031/settings"
        }
    },
    "hi": {
        "name": "Hindi",
        "texts": {
            "welcome": "‡§ë‡§ï‡•ç‡§∏‡§≤‡•à‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§",
            "select_lang": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç: ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡§º‡•Ä, ‡§π‡§ø‡§Ç‡§¶‡•Ä, ‡§Ø‡§æ ‡§¨‡§Ç‡§ó‡§æ‡§≤‡•Ä‡•§",
            "ask_name": "‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
            "morning": "‡§∂‡•Å‡§≠ ‡§™‡•ç‡§∞‡§≠‡§æ‡§§ {name}, ‡§ë‡§ï‡•ç‡§∏‡§≤‡•à‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§",
            "afternoon": "‡§∂‡•Å‡§≠ ‡§¶‡•ã‡§™‡§π‡§∞ {name}, ‡§ë‡§ï‡•ç‡§∏‡§≤‡•à‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§",
            "evening": "‡§∂‡•Å‡§≠ ‡§∏‡§Ç‡§ß‡•ç‡§Ø‡§æ {name}, ‡§ë‡§ï‡•ç‡§∏‡§≤‡•à‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§",
            "again": "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§è‡§ï ‡§î‡§∞ ‡§™‡•á‡§ú ‡§ñ‡•ã‡§≤‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
            "quit": "‡§Ö‡§≤‡§µ‡§ø‡§¶‡§æ {name}, ‡§Ü‡§™‡§ï‡§æ ‡§¶‡§ø‡§® ‡§∂‡•Å‡§≠ ‡§π‡•ã!",
            "company": "‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡§Ç‡§™‡§®‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ë‡§ï‡•ç‡§∏‡§¨‡•ã ‡§á‡§Ç‡§ü‡•á‡§≤‡•á‡§ï‡•ç‡§ü ‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§≤‡§ø‡§Æ‡§ø‡§ü‡•á‡§° ‡§π‡•à‡•§",
            "assistant": "‡§Æ‡•à‡§Ç ‡§ë‡§ï‡•ç‡§∏‡§≤‡•à‡§Ç‡§° ‡§π‡•Ç‡§Å, ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§"
        },
        "tabs": {
            "‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°": "http://209.209.40.144:3031/",
            "‡§∏‡•ç‡§•‡§æ‡§®": "http://209.209.40.144:3031/locations",
            "‡§™‡§∞‡§ø‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç": "http://209.209.40.144:3031/projects",
            "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£": "http://209.209.40.144:3031/analytics",
            "‡§≠‡•Ç‡§Æ‡§ø ‡§Ö‡§ß‡§ø‡§ó‡•ç‡§∞‡§π‡§£": "http://209.209.40.144:3031/land-acquisition",
            "‡§™‡•ç‡§≤‡•â‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®": "http://209.209.40.144:3031/plot-management",
            "‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º ‡§ñ‡•ã‡§ú": "http://209.209.40.144:3031/document-search",
            "‡§Ü‡§∞ ‡§è‡§Ç‡§° ‡§Ü‡§∞": "http://209.209.40.144:3031/r-r",
            "‡§µ‡§ø‡§µ‡§æ‡§¶ ‡§î‡§∞ ‡§Ö‡§¶‡§æ‡§≤‡§§ ‡§ï‡•á ‡§Æ‡§æ‡§Æ‡§≤‡•á": "http://209.209.40.144:3031/litigation-court-cases",
            "‡§≠‡•Ç‡§Æ‡§ø ‡§è‡§ó‡•ç‡§∞‡•Ä‡§ó‡•á‡§ü‡§∞": "http://209.209.40.144:3031/land-aggregator",
            "‡§ï‡•É‡§∑‡§ø": "http://209.209.40.144:3031/agriculture",
            "‡§≠‡•Ç‡§Æ‡§ø ‡§â‡§™‡§Ø‡•ã‡§ó ‡§î‡§∞ ‡§≠‡•Ç‡§Æ‡§ø ‡§Ü‡§µ‡§∞‡§£": "http://209.209.40.144:3031/land-use-cover",
            "‡§µ‡§® ‡§≠‡•Ç‡§Æ‡§ø": "http://209.209.40.144:3031/forest-land",
            "‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§®": "http://209.209.40.144:3031/faq",
            "‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§°‡•á‡§ü‡§æ": "http://209.209.40.144:3031/master-data",
            "‡§Ü‡§Ø‡§æ‡§§": "http://209.209.40.144:3031/imports",
            "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏": "http://209.209.40.144:3031/settings"
        }
    },
    "bn": {
        "name": "Bengali",
        "texts": {
            "welcome": "‡¶Ö‡¶ï‡ßç‡¶∏‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§",
            "select_lang": "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®: ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø, ‡¶π‡¶ø‡¶®‡ßç‡¶¶‡¶ø, ‡¶¨‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡•§",
            "ask_name": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡¶ø?",
            "morning": "‡¶∂‡ßÅ‡¶≠ ‡¶∏‡¶ï‡¶æ‡¶≤ {name}, ‡¶Ö‡¶ï‡ßç‡¶∏‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§",
            "afternoon": "‡¶∂‡ßÅ‡¶≠ ‡¶Ö‡¶™‡¶∞‡¶æ‡¶π‡ßç‡¶® {name}, ‡¶Ö‡¶ï‡ßç‡¶∏‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§",
            "evening": "‡¶∂‡ßÅ‡¶≠ ‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ {name}, ‡¶Ö‡¶ï‡ßç‡¶∏‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ‡•§",
            "again": "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶ø ‡¶™‡ßá‡¶ú ‡¶ñ‡ßÅ‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
            "quit": "‡¶¨‡¶ø‡¶¶‡¶æ‡¶Ø‡¶º {name}, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶≠ ‡¶π‡ßã‡¶ï!",
            "company": "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶Ö‡¶ï‡ßç‡¶∏‡¶¨‡ßã ‡¶á‡¶®‡ßç‡¶ü‡ßá‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü‡ßá‡¶°‡•§",
            "assistant": "‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡¶ï‡ßç‡¶∏‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ‡•§"
        },
        "tabs": {
            "‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°": "http://209.209.40.144:3031/",
            "‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®": "http://209.209.40.144:3031/locations",
            "‡¶™‡ßç‡¶∞‡¶ï‡¶≤‡ßç‡¶™‡¶∏‡¶Æ‡ßÇ‡¶π": "http://209.209.40.144:3031/projects",
            "‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£": "http://209.209.40.144:3031/analytics",
            "‡¶ú‡¶Æ‡¶ø ‡¶Ö‡¶ß‡¶ø‡¶ó‡ßç‡¶∞‡¶π‡¶£": "http://209.209.40.144:3031/land-acquisition",
            "‡¶™‡ßç‡¶≤‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ": "http://209.209.40.144:3031/plot-management",
            "‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®": "http://209.209.40.144:3031/document-search",
            "‡¶Ü‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶Ü‡¶∞": "http://209.209.40.144:3031/r-r",
            "‡¶Æ‡¶æ‡¶Æ‡¶≤‡¶æ ‡¶ì ‡¶Ü‡¶¶‡¶æ‡¶≤‡¶§‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º": "http://209.209.40.144:3031/litigation-court-cases",
            "‡¶ú‡¶Æ‡¶ø ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ú‡¶ï": "http://209.209.40.144:3031/land-aggregator",
            "‡¶ï‡ßÉ‡¶∑‡¶ø": "http://209.209.40.144:3031/agriculture",
            "‡¶≠‡ßÇ‡¶Æ‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ì ‡¶≠‡ßÇ‡¶Æ‡¶ø ‡¶Ü‡¶ö‡ßç‡¶õ‡¶æ‡¶¶‡¶®": "http://209.209.40.144:3031/land-use-cover",
            "‡¶¨‡¶®‡ßá‡¶∞ ‡¶ú‡¶Æ‡¶ø": "http://209.209.40.144:3031/forest-land",
            "‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßã‡¶§‡ßç‡¶§‡¶∞": "http://209.209.40.144:3031/faq",
            "‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ": "http://209.209.40.144:3031/master-data",
            "‡¶Ü‡¶Æ‡¶¶‡¶æ‡¶®‡¶ø": "http://209.209.40.144:3031/imports",
            "‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏": "http://209.209.40.144:3031/settings"
        }
    }
}

# ==========================
# GLOBAL STATE
# ==========================
current_language = "en"
user_name = "User"

# ==========================
# TEXT TO SPEECH
# ==========================
def say(text, lang=None):
    global current_language
    if lang is None:
        lang = current_language
    print(f"üó£ {text}")
    try:
        temp_file = os.path.join(tempfile.gettempdir(), f"{uuid.uuid4()}.mp3")
        tts = gTTS(text=text, lang=lang)
        tts.save(temp_file)
        pygame.mixer.init()
        pygame.mixer.music.load(temp_file)
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)
        pygame.mixer.music.stop()
        pygame.mixer.quit()
        os.remove(temp_file)
    except Exception as e:
        print("TTS Error:", e)

# ==========================
# SPEECH RECOGNITION
# ==========================
def input_audio():
    r = sr.Recognizer()
    lang_map = {"en": "en-IN", "hi": "hi-IN", "bn": "bn-IN"}
    language_code = lang_map.get(current_language, "en-IN")
    while True:
        try:
            with sr.Microphone() as source:
                r.adjust_for_ambient_noise(source, duration=1)
                r.pause_threshold = 0.8
                r.energy_threshold = 300
                print("üé§ Listening...")
                audio = r.listen(source, timeout=None, phrase_time_limit=8)
            try:
                query = r.recognize_google(audio, language=language_code)
                print(f"üìù Recognized: {query}")
                return query.lower()
            except sr.UnknownValueError:
                say("Sorry, I didn't catch that. Please speak again.", current_language)
            except sr.RequestError as e:
                print("Google Speech Recognition service error:", e)
                say("There is a problem with the speech service.", current_language)
                return ""
        except Exception as e:
            print("Microphone error:", e)

# ==========================
# WISH FUNCTION
# ==========================
def wish_user():
    hour = datetime.datetime.now().hour
    texts = LANGUAGES[current_language]["texts"]
    if hour < 12:
        say(texts["morning"].format(name=user_name))
    elif hour < 17:
        say(texts["afternoon"].format(name=user_name))
    else:
        say(texts["evening"].format(name=user_name))

# ==========================
# FLOW FUNCTIONS
# ==========================
def welcome_message():
    say(LANGUAGES["en"]["texts"]["welcome"], "en")

def select_language():
    global current_language
    say(LANGUAGES["en"]["texts"]["select_lang"], "en")
    response = input_audio()
    if "hindi" in response or "‡§π‡§ø‡§Ç‡§¶‡•Ä" in response:
        current_language = "hi"
    elif "bengali" in response or "bangla" in response or "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ" in response:
        current_language = "bn"
    else:
        current_language = "en"
    say(f"Language set to {LANGUAGES[current_language]['name']}", current_language)

def ask_name():
    global user_name
    say(LANGUAGES[current_language]["texts"]["ask_name"], current_language)
    response = input_audio()
    if response:
        user_name = response.split()[0].capitalize()
    else:
        user_name = "Friend"
    say(f"{user_name}, nice to meet you!", current_language)

def open_tabs_loop():
    # Speak tab selection prompt once in selected language
    tab_prompt_text = {
        "en": "Now you can select the tab.",
        "hi": "‡§Ö‡§¨ ‡§Ü‡§™ ‡§ü‡•à‡§¨ ‡§ö‡•Å‡§® ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
        "bn": "‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§"
    }
    say(tab_prompt_text[current_language], current_language)

    while True:
        response = input_audio()
        if not response:
            continue

        # Special cases for company or assistant
        if "company" in response or "‡§ï‡§Ç‡§™‡§®‡•Ä" in response or "‡¶ï‡ßã‡¶Æ‡ßç‡¶™‡¶æ‡¶®‡¶ø" in response:
            say(LANGUAGES[current_language]["texts"]["company"], current_language)
            continue
        if "oxland" in response or "‡§ë‡§ï‡•ç‡§∏‡§≤‡•à‡§Ç‡§°" in response or "‡¶Ö‡¶ï‡ßç‡¶∏‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°" in response:
            say(LANGUAGES[current_language]["texts"]["assistant"], current_language)
            continue

        # Exit command
        if any(word in response for word in ["quit", "exit", "stop", "bye", "‡§¨‡§Ç‡§¶", "‡§®‡§ø‡§ï‡§æ‡§∏", "‡¶¨‡¶®‡ßç‡¶ß", "‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶•‡¶æ‡¶®"]):
            break

        # Open the requested tab
        matched = False
        for keyword, url in LANGUAGES[current_language]["tabs"].items():
            if keyword.lower() in response:
                webbrowser.open(url)
                say(f"Opening {keyword}", current_language)
                matched = True
                break
        if not matched:
            say("Sorry, I could not understand the page.", current_language)

        # Ask if user wants to open another page
        say(LANGUAGES[current_language]["texts"]["again"], current_language)
        again = input_audio()
        if any(word in again for word in ["no", "quit", "exit", "stop", "‡§¨‡§Ç‡§¶", "‡§®‡§ø‡§ï‡§æ‡§∏", "‡¶¨‡¶®‡ßç‡¶ß", "‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶•‡¶æ‡¶®"]):
            break

def quit_message():
    say(LANGUAGES[current_language]["texts"]["quit"].format(name=user_name), current_language)
    sys.exit(0)

# ==========================
# MAIN
# ==========================
def main():
    welcome_message()
    select_language()
    ask_name()
    wish_user()
    open_tabs_loop()
    quit_message()

if __name__ == "__main__":
    main()
